repositories {
	mavenCentral()
	maven { url "https://maven.restlet.com/" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: "groovy"

configurations {
	runtime {
		transitive = true
	}
}

dependencies {
	compile gradleApi()
	compile localGroovy()
	runtime "net.sf.saxon:Saxon-HE:9.6.0-7"
	runtime 'com.xmlcalabash:xmlcalabash:1.1.9-96'
	runtime "org.apache.xmlgraphics:fop:2.0"
}

group = "com.github.rwdalpe"
version = "0.0.1"
libsDirName = "dist"
def xsltAssetsDir = file("${buildDir}/xslt-assets")

task getXsltAssets() {
	ext.lib = xsltAssetsDir
	ext.unpackDir = file("${ext.lib}/assets")
	def zipSaveDir = file("${buildDir}/xslt-assets-zips")

	doFirst {
		if(!zipSaveDir.exists()) {
			zipSaveDir.mkdirs()
		}

		if(!ext.lib.exists()) {
			ext.lib.mkdirs()
			ext.unpackDir.mkdirs()
		}

		ant.get(dest: zipSaveDir, src: "${libJingUrl}", skipexisting: true)
		ant.unzip(dest: ext.unpackDir, src: "${zipSaveDir}/${libJingZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libXslt2StylesheetsUrl}", skipexisting: true)
		ant.unzip(dest: ext.unpackDir, src: "${zipSaveDir}/${libXslt2StylesheetsZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libXslt2StylesheetsExtensionsUrl}", skipexisting: true)
		ant.unzip(dest: ext.unpackDir, src: "${zipSaveDir}/${libXslt2StylesheetsExtensionsZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libDocbookRpgExtensionsUrl}", skipexisting: true)
		ant.unzip(dest: "${ext.unpackDir}/${libDocbookRpgExtensions}", src: "${zipSaveDir}/${libDocbookRpgExtensionsZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libXslt2StylesheetsRpgExtensionsUrl}", skipexisting: true)
		ant.unzip(dest: "${ext.unpackDir}/${libXslt2StylesheetsRpgExtensions}", src: "${zipSaveDir}/${libXslt2StylesheetsRpgExtensionsZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libXslt1StylesheetsRpgExtensionsUrl}", skipexisting: true)
		ant.unzip(dest: "${ext.unpackDir}/${libXslt1StylesheetsRpgExtensions}", src: "${zipSaveDir}/${libXslt1StylesheetsRpgExtensionsZip}", overwrite: false)
	}
}

task zipAssets(type: Zip) {
	from "plugin/src/main/resources/assets"
	from tasks.getXsltAssets.unpackDir
	into "docbook-build-assets-${version}"
	archiveName "docbook-build-assets-${version}.zip"
	destinationDir = libsDir
}

sourceSets {
	main {
		java {
			srcDirs = ['plugin/src/main/java']
		}
		resources {
			srcDirs = [xsltAssetsDir, 'plugin/src/main/resources']
		}
	}
}

artifacts {
	archives jar
	archives zipAssets
}

tasks.compileJava.dependsOn tasks.getXsltAssets