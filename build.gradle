/*
	Copyright (C) 2017 Robert Winslow Dalpe

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU Affero General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Affero General Public License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Paths

repositories {
	mavenCentral()
	maven { url "https://maven.restlet.com/" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	maven { url uri("${xmlcalabashGradleDir}/build/maven-repo") }
}

apply plugin: "groovy"
apply plugin: 'maven'

configurations {
	runtime {
		transitive = true
	}
}

dependencies {
	compile gradleApi()
	compile localGroovy()
	compile 'net.lingala.zip4j:zip4j:1.3.2'
	compile 'com.thaiopensource:jing:20091111'
	compile 'xml-resolver:xml-resolver:1.2'
	compile 'org.apache.xmlgraphics:fop:2.1'
    runtime 'com.xmlcalabash:xmlcalabash1-gradle:1.2.0'
	runtime "net.sf.saxon:Saxon-HE:9.6.0-4"
	runtime "saxon:saxon:6.5.3"
	runtime 'com.xmlcalabash:xmlcalabash:1.1.12-96'
	runtime 'xerces:xerces:2.4.0'
}

group = "com.github.rwdalpe"
version = "0.0.1"
libsDirName = "dist"
def xsltAssetsDir = file("${buildDir}/xslt-assets")

def createReplaceTokens = { tokens ->
	def projectProps = project.getProperties()
	return tokens.collectEntries { token ->
		def tokenValue = projectProps.get(token)
		return [token, ("${token}=${tokenValue}").toString()]
	}
}

class XsltAsset {
    private final String version
    private final URL downloadUrl

    XsltAsset(String version, String downloadUrl) {
        this.downloadUrl = new URL(downloadUrl)
        this.version = version
    }

    String getAssetFilename() {
        return new File(downloadUrl.getPath()).getName()
    }

    String getAssetFoldername() {
        String fn = getAssetFilename();
        return fn.take(fn.lastIndexOf('.'))
    }

    URL getDownloadUrl() {
        return downloadUrl
    }
}

def xsltAssets = [
	new XsltAsset(
        dbRpgExtVer,
        "https://github.com/rwdalpe/docbook-5.0-extension_rwdalpe-rpg/releases/download/V${dbRpgExtVer}/docbook-5.0-extension_rwdalpe-rpg_${dbRpgExtVer}.zip"),
    new XsltAsset(
        dbXslt2Ver,
        "https://github.com/rwdalpe/xslt20-stylesheets/releases/download/V${dbXslt2Ver}-rwdalpe/docbook-xslt2-${dbXslt2Ver}-rwdalpe.zip"),
    new XsltAsset(
        dbXslt2RpgExtVer,
        "https://github.com/rwdalpe/docbook-xslt2-rwdalpe-extension_rpg/releases/download/V${dbXslt2RpgExtVer}/docbook-xslt2-rwdalpe-extension_rpg_${dbXslt2RpgExtVer}.zip"),
    new XsltAsset(
        dbXslt1RpgExtVer,
        "https://github.com/rwdalpe/docbook-xslt1-rwdalpe-extension_rpg/releases/download/V${dbXslt1RpgExtVer}/docbook-xslt1-rwdalpe-extension_rpg_${dbXslt1RpgExtVer}.zip")
]

task getXsltAssets() {
    ext.unpackDir = file("${xsltAssetsDir}/assets")
    def zipSaveDir = file("${buildDir}/xslt-assets-zips")

    doLast {
        if (!zipSaveDir.exists()) {
            zipSaveDir.mkdirs()
        }

        if (!unpackDir.exists()) {
            unpackDir.mkdirs()
        }

        for (asset in xsltAssets) {
            def assetUnpackDir = file(Paths.get(unpackDir.getAbsolutePath(), "${asset.getAssetFoldername()}_unpack"))

            ant.get(dest: zipSaveDir, src: asset.getDownloadUrl().toString(), skipexisting: true)
            ant.unzip(dest: assetUnpackDir, src: Paths.get(zipSaveDir.getAbsolutePath(), asset.getAssetFilename()), overwrite: false)

            def assetChildFiles = assetUnpackDir.list()
            def destPath = Paths.get(unpackDir.getAbsolutePath(), asset.getAssetFoldername())
            def srcPath = assetUnpackDir

            if (assetChildFiles.size() == 1 && assetChildFiles[0] == asset.getAssetFoldername()) {
                srcPath = Paths.get(assetUnpackDir.getAbsolutePath(), assetChildFiles[0])
            }

            delete(destPath)
            copy {
                from(srcPath)
                into(destPath)
            }
            delete(assetUnpackDir)
        }
    }
}

task zipAssetsForArtifact(type: Zip, dependsOn: [getXsltAssets]) {
	from "plugin/src/main/assets"
	from tasks.getXsltAssets.unpackDir
	into "docbook-build-assets-${version}"
	archiveName "docbook-build-assets-${version}.zip"
	destinationDir = libsDir
}

task zipAssetsForJar(type: Zip, dependsOn: [getXsltAssets]) {
	from "plugin/src/main/assets"
	from tasks.getXsltAssets.unpackDir
	into "docbook-build-assets"
	archiveName "docbook-build-assets.zip"
	destinationDir = file("${xsltAssetsDir}/final")
}

task preparePropertiesFile(type: Copy, dependsOn: [zipAssetsForJar]) {
	from "plugin/src/main/"
	into file("${xsltAssetsDir}/final").absolutePath
	include "*.properties"
	rename("sample-properties.properties", "docbook-build.properties")
	filter(ReplaceTokens, tokens: createReplaceTokens(["libDocbookRpgExtensions", "libXslt2Stylesheets", "libXslt2StylesheetsExtensions", "libXslt2StylesheetsRpgExtensions", "libXslt1StylesheetsRpgExtensions"]))
}

sourceSets {
	main {
		groovy {
			srcDirs = ['plugin/src/main/groovy']
		}
		resources {
			srcDirs = ["${xsltAssetsDir}/final", "plugin/src/main/resources"]
		}
	}
}

artifacts {
	archives zipAssetsForArtifact
	archives jar
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: uri("${buildDir}/maven-repo"))
		}
	}
}

tasks.compileGroovy.dependsOn tasks.getXsltAssets, tasks.preparePropertiesFile
