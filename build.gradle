/*
	Copyright (C) 2017 Robert Winslow Dalpe

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU Affero General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Affero General Public License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

import org.apache.tools.ant.filters.ReplaceTokens

repositories {
	mavenCentral()
	maven { url "https://maven.restlet.com/" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: "groovy"
apply plugin: 'maven'

configurations {
	runtime {
		transitive = true
	}
}

dependencies {
	compile gradleApi()
	compile localGroovy()
	compile 'net.lingala.zip4j:zip4j:1.3.2'
	compile 'com.thaiopensource:jing:20091111'
	compile 'xml-resolver:xml-resolver:1.2'
	compile 'org.apache.xmlgraphics:fop:2.1'
	runtime "net.sf.saxon:Saxon-HE:9.6.0-4"
	runtime "saxon:saxon:6.5.3"
	runtime 'com.xmlcalabash:xmlcalabash:1.1.12-96'
	runtime 'xerces:xerces:2.4.0'
}

group = "com.github.rwdalpe"
version = "0.0.1"
libsDirName = "dist"
def xsltAssetsDir = file("${buildDir}/xslt-assets")

def createReplaceTokens = { tokens ->
	def projectProps = project.getProperties()
	return tokens.collectEntries { token ->
		def tokenValue = projectProps.get(token)
		return [token, ("${token}=${tokenValue}").toString()]
	}
}

task getXsltAssets() {
	ext.lib = xsltAssetsDir
	ext.unpackDir = file("${ext.lib}/assets")
	def zipSaveDir = file("${buildDir}/xslt-assets-zips")

	doFirst {
		if (!zipSaveDir.exists()) {
			zipSaveDir.mkdirs()
		}

		if (!ext.lib.exists()) {
			ext.lib.mkdirs()
			ext.unpackDir.mkdirs()
		}

		ant.get(dest: zipSaveDir, src: "${libXslt2StylesheetsUrl}", skipexisting: true)
		ant.unzip(dest: ext.unpackDir, src: "${zipSaveDir}/${libXslt2StylesheetsZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libXslt2StylesheetsExtensionsUrl}", skipexisting: true)
		ant.unzip(dest: ext.unpackDir, src: "${zipSaveDir}/${libXslt2StylesheetsExtensionsZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libDocbookRpgExtensionsUrl}", skipexisting: true)
		ant.unzip(dest: "${ext.unpackDir}/${libDocbookRpgExtensions}", src: "${zipSaveDir}/${libDocbookRpgExtensionsZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libXslt2StylesheetsRpgExtensionsUrl}", skipexisting: true)
		ant.unzip(dest: "${ext.unpackDir}/${libXslt2StylesheetsRpgExtensions}", src: "${zipSaveDir}/${libXslt2StylesheetsRpgExtensionsZip}", overwrite: false)
		ant.get(dest: zipSaveDir, src: "${libXslt1StylesheetsRpgExtensionsUrl}", skipexisting: true)
		ant.unzip(dest: "${ext.unpackDir}/${libXslt1StylesheetsRpgExtensions}", src: "${zipSaveDir}/${libXslt1StylesheetsRpgExtensionsZip}", overwrite: false)
	}
}

task zipAssetsForArtifact(type: Zip, dependsOn: [getXsltAssets]) {
	from "plugin/src/main/assets"
	from tasks.getXsltAssets.unpackDir
	into "docbook-build-assets-${version}"
	archiveName "docbook-build-assets-${version}.zip"
	destinationDir = libsDir
}

task zipAssetsForJar(type: Zip, dependsOn: [getXsltAssets]) {
	from "plugin/src/main/assets"
	from tasks.getXsltAssets.unpackDir
	into "docbook-build-assets"
	archiveName "docbook-build-assets.zip"
	destinationDir = file("${xsltAssetsDir}/final")
}

task preparePropertiesFile(type: Copy, dependsOn: [zipAssetsForJar]) {
	from "plugin/src/main/"
	into file("${xsltAssetsDir}/final").absolutePath
	include "*.properties"
	rename("sample-properties.properties", "docbook-build.properties")
	filter(ReplaceTokens, tokens: createReplaceTokens(["libDocbookRpgExtensions", "libXslt2Stylesheets", "libXslt2StylesheetsExtensions", "libXslt2StylesheetsRpgExtensions", "libXslt1StylesheetsRpgExtensions"]))
}

sourceSets {
	main {
		groovy {
			srcDirs = ['plugin/src/main/groovy']
		}
		resources {
			srcDirs = ["${xsltAssetsDir}/final", "plugin/src/main/resources"]
		}
	}
}

artifacts {
	archives zipAssetsForArtifact
	archives jar
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: uri("${buildDir}/maven-repo"))
		}
	}
}

tasks.compileGroovy.dependsOn tasks.getXsltAssets, tasks.preparePropertiesFile
